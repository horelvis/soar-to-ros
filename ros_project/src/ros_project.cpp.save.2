#include <ros/ros.h>
#include "std_msgs/String.h"
#include <dynamic_reconfigure/server.h>
#include <ros_project/mystuffConfig.h>
#include <ar_pose/ARMarker.h>
#include <geometry_msgs/Twist.h>
#include <std_msgs/Empty.h>
#include "tf/transform_listener.h"
#include <geometry_msgs/Quaternion.h>
#include <std_srvs/Empty.h>
#include <ros/package.h>
double x,y,z;
double ax,ay,az;
double xd,yd,zd;
geometry_msgs::Quaternion q;
tf::Quaternion 	qt;
std_msgs::Empty msgs;
std_srvs::Empty call;
double error;
ros::Publisher control_vel;
ros::Publisher control_takeoff;
ros::Publisher control_landing;
ros::ServiceClient change_camera;
bool taking_off,landing=false;
bool marker_visible=false;
int state=0;
bool state_camera =0; // 0 front 1 bottom
ros::Time  begin ;
void callback(const ar_pose::ARMarker::ConstPtr& msg){
		marker_visible=true;
		x=msg->pose.pose.position.x;
		y=msg->pose.pose.position.y;
		z=msg->pose.pose.position.z;	
		q=msg->pose.pose.orientation;
		ROS_INFO(" x: %f y: %f z: %f ",x,y,z);
		

}



void change_cam(){
	state_camera= !state_camera;
	change_camera.call(call);
	//ros::Duration(1).sleep();
}

void change_pattern(){

	ros::param::set("/ar_pose/marker_pattern",ros::package::getPath("ar_pose")+"/data/4x4/4x4_95.patt");

}


void update_control_law(){
	geometry_msgs::Twist vel;
	if(taking_off&&!landing&&marker_visible){
		if(state == 0){	
			tf::quaternionMsgToTF(q,qt);
			tf::Matrix3x3(qt).getRPY(ax,ay,az);
			
			//geometry_msgs::Twist vel;
			//std_msgs::Empty take;
			vel.linear.y=-0.1*x;	
			vel.linear.x=-0.1*y;
			vel.linear.z= 0.1*(1-z);
			vel.angular.z=-0.1*az;//-0.1*az;
			control_vel.publish(vel);

			ROS_INFO("I heard the marker 0: %f %f %f %f ",x,y,z,az);
		

		
	   	
		if(x<0.1 && x>-0.1 && y <0.1 && y>-0.1 && az<0.1 && az>-0.1 && z<1.1 && z>0.9){
			begin = ros::Time::now();
			state=1;
		
		}	
			control_vel.publish(vel);
			ROS_INFO("Alignment");
		
	  }else if(state==1){
				ROS_INFO("in state 1");	
				change_cam();	
			//	vel.linear.x=0;
			//	vel.linear.y=0;
			//	vel.linear.z=0;	
			//	vel.angular.z=0;

			//	control_vel.publish(vel);
				ros::Duration(5).sleep();
				
state=2;
				marker_visible=false;
	  }else if(state==2){
			ROS_INFO("In state 2");
			//change the marker pattern
			change_pattern();
			//ros::Duration(0.5).sleep();			
			//vel.linear.y=-0.1*x;	
			//vel.linear.x=-0.1*y;
			//vel.linear.z= 0.1*(1-z);
		//	vel.angular.z=0.3;
		//	control_vel.publish(vel);
		//	if(marker_visible){
		//		 state=3;
		//	     	 ROS_INFO("MARKER VISIBLE AGAIN");	
		//	}
	  }else if(state==3){
			//align with the maker
		  
			state++;
	  }else if(state==4){
			// go there
			tf::quaternionMsgToTF(q,qt);
			tf::Matrix3x3(qt).getRPY(ax,ay,az);
			
			//geometry_msgs::Twist vel;
			//std_msgs::Empty take;
			vel.linear.y=-0.1*x;	
			vel.linear.x=-0.1*y;
			vel.linear.z= 0.1*(1-z);
			vel.angular.z=-0.1*az;//-0.1*az;
			control_vel.publish(vel);

			ROS_INFO("I heard the marker 0: %f %f %f %f ",x,y,z,az);
			state++;
	  }else if(state==5){
			// in 1 m, wait 5 seconds
			ros::Duration(5).sleep();
			control_landing.publish(msgs);
	  }
	}
}




void callback2(ar_node::mystuffConfig &config, uint32_t level ){

	geometry_msgs::Twist vel;
	if(!taking_off && config.take_off){
		std_msgs::Empty take;
		//vel.linear.z =1;
		control_takeoff.publish(take);
		//control_vel.publish(vel);
		if(!state_camera) change_cam();		
		ROS_INFO("TAKING_OFF");
	}

	if(!landing && config.land) {

		std_msgs::Empty land;
		control_landing.publish(land);
		ROS_INFO("LANDING");

	}
	taking_off=config.take_off;
	landing=config.land;
	ROS_INFO("Desired position: %d %d ",taking_off,landing);	
}


int main(int argc,char **argv){	
	// Initialize the ROS system
	ros::init(argc,argv, "ros_project");
	ros::NodeHandle nh;
	
	
	control_takeoff = nh.advertise<std_msgs::Empty>("ardrone/takeoff",1000);
	control_landing = nh.advertise<std_msgs::Empty>("ardrone/land",1000);
	control_vel =  nh.advertise<geometry_msgs::Twist>("cmd_vel",1000);
	change_camera = nh.serviceClient<std_srvs::Empty>("/ardrone/togglecam");
	
	dynamic_reconfigure::Server<ar_node::mystuffConfig>srv;
	dynamic_reconfigure::Server<ar_node::mystuffConfig>::CallbackType f;
	f= boost::bind(&callback2, _1,_2);
	srv.setCallback(f);
	ros::Subscriber sub = nh.subscribe("ar_pose_marker",20,callback);
	ros::Rate loop_rate(10);
	
		//update_control_law();
	//	error = sqrt((xd-x)*(xd-x)+(yd-y)*(yd-y)+(zd-z)*(zd-z));	
	//	ROS_INFO("Error: %f",error);

	if(change_camera.call(call)) ROS_INFO("TOOGLE");
	else ROS_INFO("NO TOOGLE");
	while(ros::ok()){
		ros::spinOnce();
		update_control_law();
		loop_rate.sleep();
	}
}
