#include <ros/ros.h>
#include "std_msgs/String.h"
#include <dynamic_reconfigure/server.h>
#include <ros_project/mystuffConfig.h>
#include <ar_pose/ARMarkers.h>
double x,y,z;
double xd,yd,zd;
bool taking_off,landing=false;

double error;

void callback(const ar_pose::ARMarkers::ConstPtr& msg){

	if(msg->markers.size() !=0){
		x=msg->markers[0].pose.pose.position.x;
		y=msg->markers[0].pose.pose.position.y;
		z=msg->markers[0].pose.pose.position.z;	
		ROS_INFO("I heard the marker 0: %f %f %f ",x,y,z);
	}
}

void callback2(ar_node::mystuffConfig &config, uint32_t level ){
	

	if(!taking_off && config.take_off){


	}

	if(landing && config.land){



	}

	taking_off=config.take_off;
	landing=config.land;
	
	
	ROS_INFO("Desired position:  %f %f",xd,yd,zd);	
}


int main(int argc,char **argv){	
	// Initialize the ROS system
	ros::init(argc,argv, "ros_project");
	ros::NodeHandle nh;
	
	dynamic_reconfigure::Server<ar_node::mystuffConfig>srv;
	dynamic_reconfigure::Server<ar_node::mystuffConfig>::CallbackType f;
	f= boost::bind(&callback2, _1,_2);
	srv.setCallback(f);
	ros::Subscriber sub = nh.subscribe("ros_project/Markers",1000,callback);
	ros::Rate loop_rate(1);
	while(ros::ok())
	{
		error = sqrt((xd-x)*(xd-x)+(yd-y)*(yd-y)+(zd-z)*(zd-z));	
		ROS_INFO("Error: %f",error);
		ros::spinOnce();
		loop_rate.sleep();
	}
}
